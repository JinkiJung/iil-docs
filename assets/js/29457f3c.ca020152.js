"use strict";(self.webpackChunkiil_docs=self.webpackChunkiil_docs||[]).push([[362],{9216:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>r,contentTitle:()=>a,default:()=>h,frontMatter:()=>o,metadata:()=>c,toc:()=>l});var t=i(5893),s=i(1151);const o={sidebar_position:2},a="Consequence",c={id:"relationship/consequence",title:"Consequence",description:"iil's conditional branching mechanism enables the modeling of cause-and-effect or consequence relationships between tasks.",source:"@site/docs/relationship/consequence.md",sourceDirName:"relationship",slug:"/relationship/consequence",permalink:"/iil-docs/docs/relationship/consequence",draft:!1,unlisted:!1,tags:[],version:"current",sidebarPosition:2,frontMatter:{sidebar_position:2},sidebar:"tutorialSidebar",previous:{title:"Composite",permalink:"/iil-docs/docs/relationship/divide-and-conqure"}},r={},l=[{value:"Consequence with Next as condition",id:"consequence-with-next-as-condition",level:2}];function d(e){const n={em:"em",h1:"h1",h2:"h2",img:"img",li:"li",p:"p",ul:"ul",...(0,s.a)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.h1,{id:"consequence",children:"Consequence"}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.em,{children:"iil"}),"'s conditional branching mechanism enables the modeling of cause-and-effect or consequence relationships between tasks."]}),"\n",(0,t.jsx)(n.p,{children:"This feature facilitates a more dynamic and adaptable approach to task management, allowing for seamless transitions between tasks based on predefined criteria."}),"\n",(0,t.jsx)(n.p,{children:"The simplest example is an iil triggering another iil as a next step."}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.img,{alt:"two iil blocks",src:i(7114).Z+"",width:"608",height:"141"})}),"\n",(0,t.jsxs)(n.p,{children:["Note that the cause iil block's ",(0,t.jsx)(n.em,{children:"finish if"})," coincides with the ",(0,t.jsx)(n.em,{children:"activate if"})," of the effect one, which triggers both end of one sequence and beginning of another one."]}),"\n",(0,t.jsx)(n.h2,{id:"consequence-with-next-as-condition",children:"Consequence with Next as condition"}),"\n",(0,t.jsxs)(n.p,{children:["In a bit complicated setup, we can utilize a condition called ",(0,t.jsx)(n.em,{children:"next"})," to control a consequence flow."]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.img,{alt:"two iil blocks with condition",src:i(3820).Z+"",width:"1436",height:"282"})}),"\n",(0,t.jsxs)(n.p,{children:["Note that the ",(0,t.jsx)(n.em,{children:"next"}),' of the first iil - "want some dessert?" - has a conditional branch which leads two different flows depending on the result.']}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.em,{children:"next"}),", iil's conditional branching mechanism, enables the modeling of cause-and-effect or consequence relationships between tasks, providing a more dynamic and adaptable approach to task management. This feature offers three key benefits:"]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsx)(n.p,{children:"Exclusiveness: Only the completion of the relevant iil triggers the condition check, ensuring that transitions are based on consistent completion criteria."}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:'Example: The "want some dessert?" check will only be triggered after the completion of the iil for "You eat food!", preventing any premature progression.'}),"\n"]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsx)(n.p,{children:"Privacy: Private data or variables used within each iil remain shielded from unauthorized access, while the underlying logic remains accessible for all relevant parties."}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:['Example: Internal data used during "You eat food!" is only accessible for the actor, owner, and maintainer, protecting sensitive information. Only ',(0,t.jsx)(n.em,{children:"output"})," data produced at its termination will be accessable from ",(0,t.jsx)(n.em,{children:"next"}),"."]}),"\n"]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsx)(n.p,{children:"Readability: The conditional branching structure enhances readability, making it easier for users to understand the flow of tasks and the conditions that trigger transitions."}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:"In the execution phase, such consequence model makes user easier to capture which stage they are at and which condition blocks its flow, visualizing the problem to solve."})]})}function h(e={}){const{wrapper:n}={...(0,s.a)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(d,{...e})}):d(e)}},3820:(e,n,i)=>{i.d(n,{Z:()=>t});const t=i.p+"assets/images/iil-base+condition.drawio-205dc2430da93bd118fc85d63e7d98f1.png"},7114:(e,n,i)=>{i.d(n,{Z:()=>t});const t=i.p+"assets/images/iil-consequence.drawio-dc463035104cb3c9ca0d06fe87b4e4cf.png"},1151:(e,n,i)=>{i.d(n,{Z:()=>c,a:()=>a});var t=i(7294);const s={},o=t.createContext(s);function a(e){const n=t.useContext(o);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function c(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:a(e.components),t.createElement(o.Provider,{value:n},e.children)}}}]);