"use strict";(self.webpackChunkiil_docs=self.webpackChunkiil_docs||[]).push([[117],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>m});var r=n(7294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function a(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,r,i=function(e,t){if(null==e)return{};var n,r,i={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var l=r.createContext({}),c=function(e){var t=r.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):a(a({},t),e)),n},p=function(e){var t=c(e.components);return r.createElement(l.Provider,{value:t},e.children)},u="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},f=r.forwardRef((function(e,t){var n=e.components,i=e.mdxType,o=e.originalType,l=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),u=c(n),f=i,m=u["".concat(l,".").concat(f)]||u[f]||d[f]||o;return n?r.createElement(m,a(a({ref:t},p),{},{components:n})):r.createElement(m,a({ref:t},p))}));function m(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var o=n.length,a=new Array(o);a[0]=f;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s[u]="string"==typeof e?e:i,a[1]=s;for(var c=2;c<o;c++)a[c]=n[c];return r.createElement.apply(null,a)}return r.createElement.apply(null,n)}f.displayName="MDXCreateElement"},1690:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>a,default:()=>u,frontMatter:()=>o,metadata:()=>s,toc:()=>c});var r=n(7462),i=(n(7294),n(3905));const o={sidebar_position:1},a="Concept",s={unversionedId:"iil/concept",id:"iil/concept",title:"Concept",description:"iil is a representation of work. The goal of iil is to render all levels (from high- to unit-level) of work in a single model. It doesn\u2019t mean that iil doesn\u2019t necessarily render a complex task into a single model, instead describes a condition on when the work is considered as finished, representing integrity as work description.",source:"@site/docs/iil/concept.md",sourceDirName:"iil",slug:"/iil/concept",permalink:"/iil-docs/docs/iil/concept",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/iil/concept.md",tags:[],version:"current",sidebarPosition:1,frontMatter:{sidebar_position:1},sidebar:"tutorialSidebar",previous:{title:"Concept",permalink:"/iil-docs/docs/category/concept"},next:{title:"Data structure",permalink:"/iil-docs/docs/iil/data-structure"}},l={},c=[],p={toc:c};function u(e){let{components:t,...n}=e;return(0,i.kt)("wrapper",(0,r.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"concept"},"Concept"),(0,i.kt)("p",null,(0,i.kt)("em",{parentName:"p"},"iil")," is a representation of work. The goal of iil is to render all levels (from high- to unit-level) of work in a single model. It doesn\u2019t mean that iil doesn\u2019t necessarily render a complex task into a single model, instead describes a condition on when the work is considered as finished, representing integrity as work description."),(0,i.kt)("p",null,"Note that here the condition (we call it as ",(0,i.kt)("em",{parentName:"p"},"finishIf"),") doesn't mean the criteria of success or fail, but just termination. We will get that later."),(0,i.kt)("h1",{id:"recursive-nature"},"Recursive nature"),(0,i.kt)("p",null,"In order to make the work finished you split up a task into multiple subtasks in order to satisfy the condition ",(0,i.kt)("em",{parentName:"p"},"finishIf"),", convert the subtasks into iils and build a relationship between iils, either parent-child relationship or consequence. "),(0,i.kt)("p",null,"For example, let's assume that you want to finish reading on the iil model. Then a corresponding iil could be build as follows:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"actor: you\nact: read this documentation\nfinishIf: read the last line\n")),(0,i.kt)("p",null,"Here ",(0,i.kt)("em",{parentName:"p"},"act")," describes an action to be performed by ",(0,i.kt)("em",{parentName:"p"},"actor")," who is responsible for completion of the iil."),(0,i.kt)("p",null,"The iil can be splited into two iils,"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"actor: you\nact: read Concept section\nfinishIf: read the last line of Concept section\n")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"actor: you\nact: read Recursive nature section\nfinishIf: read the last line of Recursive nature\n")),(0,i.kt)("p",null,"It is also possible to recursively break more things down into lower-level iils, and the simpler ",(0,i.kt)("em",{parentName:"p"},"act")," gets the clearer ",(0,i.kt)("em",{parentName:"p"},"finishIf"),"."),(0,i.kt)("p",null,"In this way, iil model will help you to describe how you get things done step by step."))}u.isMDXComponent=!0}}]);