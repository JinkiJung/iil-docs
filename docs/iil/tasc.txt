

Tasc
Tasc is a basic component and a single step of a scenario, following a simple syntax below:

goal: high-level task description
given: input
startWhen: condition that initiates Tasc
actor: intelligent terminus who performs Tasc
act: a static or dynamic action to accomplish goal
guidedBy: instruction guiding actor
endWhen: condition that terminates Tasc and triggers leadTo
produce: output being generated as an outcome of act
leadTo: flow of scoring, feedback, and transition to next Tasc
Tasc has two basic states, hasPerformed and isDone.

Scenario
A scenario is a consequences of Tascs, which will eventually turn into a linked list.

Terminus
Terminus is a object has physical properties of a location and a bounding area, and
has state
might represent spatial knowledge
might perform action
can be a subject of Instruction
Action
Action is a dynamic behaviour of Terminus that produce State or data. Some action has target of the action which is Terminus type. Action can be interpreted as a motor skill of a user to be performed at Tasc. The measurement for performance evaluation can be taken from Action.

Condition
Condition is a deterministic criteria triggered by a range of State change. For example until states the termination condition of Tasc. To be more specific until performs as a trigger that the termination condition should be checked where the actual validation of the condition is performed by then.

Instruction
Instruction transfers Information to Terminus through single or multiple Interfaces. A Tasc can have multiple instructions for the multimodal interaction. It aims to guide a human user as a Terminus to accomplish the goal of the Tasc through multimodal interfaces. For the case of Terminus as autonomous agent it can be used to inform its state or progress to human observers.

Context
Context is a description of prerequisite. Currently supported as a list of strings.

Flow
Flow is post processing of Tasc to control the flow afterward and consists of three parts: Evaluation, Feedback, and link to the next Tasc. Evaluation can be made through an equation with the measurements as variables resulting a float value. Feedback then shows effects corresponding the score, which represents the user’s performance through either a positive or negative way. Flow also provides link to the next Tasc based on the evaluation score.

Interface
Interface is a tool to represent Information with a sensory modality (such as visual, auditory, haptic, and others).






*iil* is a high-level script for representing tasks and its consequences. iil can represent a procedure of task, scenario by indicating which information needs to be transferred, and how the performance of the actor can be evaluated by chosen measurements. The use of iil will radically reduce the time and cost of implementing a scenario when it comes to development of an executable program of VR/AR or simulation. The scope of iil is only for modelling of scenario. It’s execution is dependent to the engine that compiles the script. Same iil can be differently interpreted by different dependency. iil enables more accurate communication of client and developer through syntax in implementation.


Primary usage of iil will be:
* Simple creation of a scenario or a situation with sequential flow
* Designing information transfer for user within context
* Evaluating user performance on a per-step basis or whole
* Plug-and-play scenario execution based on iil and engine
* Evaluation of scenario itself (quality of scenario in terms of information transfer)

iil has been influenced by several concepts such as [GOMS model](https://en.wikipedia.org/wiki/GOMS), [behavior-driven development (BDD)](https://en.wikipedia.org/wiki/Behavior-driven_development), [Human processor model (MHP)](https://en.wikipedia.org/wiki/Human_processor_model), [promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise) and [Event-Condition-Action rule model (ECA)](https://en.wikipedia.org/wiki/Event_condition_action).

Related GitHub repositories are:
documentation * Tasc documentation: (https://github.com/JinkiJung/Tasc)
editor * Tasc to-do list: (https://github.com/JinkiJung/tasc-todo) * Tasc web-editor: (https://github.com/JinkiJung/Tasc-editor)
engine * Tasc-Unity engine: (https://github.com/JinkiJung/Tasc-Unity)
reference implementations with the engine * Maze escape 3D as a reference implementation based on Tasc-Unity: (https://github.com/VirtualityForSafety/MazeEscape3D) * Stretching exercise 3D as a reference implementation based on Tasc-Unity: (https://github.com/VirtualityForSafety/StretchingExercise3D) * Crane manipulation 3D as a reference implementation based on Tasc-Unity: (https://github.com/VirtualityForSafety/CraneManipulation3D)
